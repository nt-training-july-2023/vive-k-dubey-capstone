package com.backend.employee.serviceimpl;

import com.backend.employee.dto.ProjectDto;
import com.backend.employee.dto.RegisterDto;
import com.backend.employee.dto.ResponseDto;
import com.backend.employee.entity.ProjectEntity;
import com.backend.employee.entity.RegisterEntity;
import com.backend.employee.repo.ProjectRepo;
import com.backend.employee.repo.RegisterRepo;
import com.backend.employee.service.AdminService;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class AdminServiceImpl implements AdminService {

    private final RegisterRepo registerRepository;
    private final ProjectRepo projectRepository;

    @Autowired
    public AdminServiceImpl(RegisterRepo registerRepository, ProjectRepo projectRepository) {
        this.registerRepository = registerRepository;
        this.projectRepository = projectRepository;
    }

    @Override
    public ResponseDto<RegisterDto> addEmployee(RegisterDto registerDto) {
        // Convert DTO to Entity
        RegisterEntity registerEntity = new RegisterEntity(registerDto);
        
        //String skills = String.join(",", registerDto.getEmpSkills());
        registerEntity.setEmpSkills(registerDto.getEmpSkills());
        
        if ("employee".equals(registerDto.getEmpRole())) {
          // Assuming the role of the manager is "admin"
          // You should replace "admin" with the actual role for admins in your application
          // Load the manager's name based on the role
          RegisterEntity managerEntity = registerRepository.findByEmpRole("admin");
          if (managerEntity != null) {
              registerEntity.setManager(managerEntity.getEmpName());
          } else {
              // Handle the case where the admin is not found (perhaps set a default manager)
              registerEntity.setManager("Default Manager");
          }
      } else {
          // For admin or other roles, set manager as null or another default value as needed
          registerEntity.setManager(null);
      }

        registerRepository.save(registerEntity);

        return new ResponseDto<>("Employee added successfully", 200, null);
    }
    
    
    
    
    @Override
    public ResponseDto<RegisterDto> getAllEmployees() {
        List<RegisterEntity> managerEntities = registerRepository.findAllByEmpRole("employee");
        System.out.println(managerEntities);

        if ( !managerEntities.isEmpty()) {
            List<RegisterDto> managerDtos = convertToRegisterDtoList(managerEntities);
            return new ResponseDto<>("Employees retrieved successfully", 200, managerDtos);
        } else {
            return new ResponseDto<>("No employees found", 404, new ArrayList<>());
        }
    }
    
 // Implement a method to convert a list of RegisterEntity objects to RegisterDto objects
    private List<RegisterDto> convertToRegisterDtoList(List<RegisterEntity> entities) {
        List<RegisterDto> dtos = new ArrayList<>();
        for (RegisterEntity entity : entities) {
            RegisterDto dto = new RegisterDto();
            // Map entity fields to dto fields
            dto.setEmpId(entity.getEmpId());
            dto.setEmpName(entity.getEmpName());
            dto.setEmpContactNo(entity.getEmpContactNo());
            dto.setEmpDesignation(entity.getEmpDesignation());
            dto.setEmpDOB(entity.getEmpDOB());
            dto.setEmpDOJ(entity.getEmpDOJ());
            dto.setEmpLocation(entity.getEmpLocation());
            dto.setEmpRole(entity.getEmpRole());
            dto.setEmpEmail(entity.getEmpEmail());
            dto.setEmpSkills(entity.getEmpSkills());
            dto.setManager(entity.getManager());
            // ... map other fields
            dtos.add(dto);
        }
        return dtos;
    }
    
   
    
    @Override
    public ResponseDto<RegisterDto> getAllManagers() {
        List<RegisterEntity> managerEntities = registerRepository.findAllByEmpRole("manager");
        System.out.println(managerEntities);

        if ( !managerEntities.isEmpty()) {
            List<RegisterDto> managerDtos = convertToRegisterDtoList(managerEntities);
            return new ResponseDto<>("Managers retrieved successfully", 200, managerDtos);
        } else {
            return new ResponseDto<>("No managers found", 404, new ArrayList<>());
        }
    }
    
    // testing code
    @Override
    public ResponseDto<ProjectDto> addProject(ProjectDto projectDto) {
        // Perform validation and data transformation here if needed
        // For example, check if managerEmployeeId exists in your employee records

        // Create a ProjectEntity from the ProjectDto
        ProjectEntity projectEntity = new ProjectEntity(projectDto);

        // Save the project to the database
        projectRepository.save(projectEntity);

        // Return a success response
        return new ResponseDto<ProjectDto>("Project added successfully", 200, projectDto);
    }
    
    @Override
    public ResponseDto<ProjectDto> getAllProjects() {
        List<ProjectEntity> projects = projectRepository.findAll();
        // Convert projects to a list of ProjectDto objects
        List<ProjectDto> projectDtos = convertToProjectDtoList(projects);
        return new ResponseDto<>("Projects retrieved successfully", 200, projectDtos);
    }
    
 // Implement a method to convert a list of ProjectEntity objects to ProjectDto objects
    private List<ProjectDto> convertToProjectDtoList(List<ProjectEntity> entities) {
        List<ProjectDto> dtos = new ArrayList<>();
        for (ProjectEntity entity : entities) {
            ProjectDto dto = new ProjectDto();
            // Map entity fields to dto fields
            dto.setProjectId(entity.getProjectId());
            dto.setName(entity.getName());
            dto.setDescription(entity.getDescription());
            dto.setStartDate(entity.getStartDate());
            dto.setManagerEmployeeId(entity.getManagerEmployeeId());
            dto.setSkills(entity.getSkills());
            // ... map other fields
            dtos.add(dto);
        }
        return dtos;
    }
    
    
    
  
    
}

